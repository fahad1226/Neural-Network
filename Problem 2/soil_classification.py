# -*- coding: utf-8 -*-
"""Soil Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZjoctQj0f9wmz8Lr7stepPDrWx5L_Z_M
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing
print(tf.__version__)

from google.colab import files
uploaded = files.upload()

import io
train = pd.read_csv(io.BytesIO(uploaded['train.csv']))

train_data = train.copy()
train_data

train_data.isna().sum()

train_data = train_data.dropna()

train_data = pd.get_dummies(train_data, prefix='', prefix_sep='')
train_data

train_dataset = train_data

train_dataset

train_dataset.describe().transpose()

sns.pairplot(train_dataset[['Color', 'Gravel (%)', 'Sand(%)', 'FGP(%)', 'Liquid\nLimit\n(%)', 'Plastic\nLimit\n(%)']], diag_kind='kde')

temp = ['Color', 'Gravel (%)', 'Sand(%)', 'FGP(%)', 'Liquid\nLimit\n(%)', 'Plastic\nLimit\n(%)', 'Classification']

train_dataset = train_dataset[temp]
train_dataset.columns

train_dataset.info()

# X = train_dataset.drop('Classification',axis=1).values
# Y = train_dataset['Classification'].values

test_upload = files.upload()
test_data = pd.read_csv(io.BytesIO(test_upload['test.csv']))

test_dataset = test_data

# X = test_dataset.drop('Classification',axis=1).values
# Y = test_dataset['Classification'].values

# from sklearn.model_selection import train_test_split
# x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)

train_features = train_dataset.copy()
test_features = test_dataset.copy()

train_labels = train_features.pop('Classification')
test_labels = test_features.pop('Classification')

test_labels

from sklearn.preprocessing import StandardScaler
s_scaler = StandardScaler()
train_dataset = s_scaler.fit_transform(train_dataset.astype(np.float))
test_dataset = s_scaler.transform(test_dataset.astype(np.float))

train_dataset

train_dataset.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Dropout

model = Sequential()
model.add(Dense(10,activation='relu'))
model.add(Dense(8,activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

normalizer = preprocessing.Normalization()
normalizer.adapt(np.array(train_features))

model.compile(
    optimizer=tf.optimizers.Adam(learning_rate=0.1),
    loss='mean_absolute_error')

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = model.fit(
#     train_features, train_labels,
#     epochs=100,
#     # suppress logging
#     verbose=0,
#     # Calculate validation results on 20% of the training data
#     validation_split = 0.2)

def plot_loss(history):
  plt.plot(history.history['loss'], label='loss')
  plt.plot(history.history['val_loss'], label='val_loss')
  plt.ylim([0, 10])
  plt.xlabel('Epoch')
  plt.ylabel('Error [Classification]')
  plt.legend()
  plt.grid(True)

plot_loss(history)

train = model.predict(train_features[:10])
print('prediction from our training data set')
for i in train:
    for j in i:
      if int(j) == 1:
        print(f"{int(j)} --> Clayey sand (SC)", end = " ")
      if int(j) == 2:
        print(f"{int(j)} --> Clay with medium compressibility (CI )", end = " ")
      if int(j) == 3:
        print(f"{int(j)} --> Clay with low compressibility. (CL)", end = " ")
      if int(j) == 4:
        print(f"{int(j)} --> Slit with medium compressibility (MI)", end = " ")
    print()

# Commented out IPython magic to ensure Python compatibility.
# #test our model
# %%time
# history = model.fit(
#     test_features, test_labels,
#     epochs=100,
#     # suppress logging
#     verbose=0,
#     # Calculate validation results on 20% of the training data
#     validation_split = 0.2)

plot_loss(history)

test = model.predict(test_features[:8])
print('prediction from our testing data set')
for i in test:
    for j in i:
      if int(j) == 1:
        print(f"{int(j)} --> Clayey sand (SC)", end = " ")
      if int(j) == 2:
        print(f"{int(j)} --> Clay with medium compressibility (CI )", end = " ")
      if int(j) == 3:
        print(f"{int(j)} --> Clay with low compressibility. (CL)", end = " ")
      if int(j) == 4:
        print(f"{int(j)} --> Slit with medium compressibility (MI)", end = " ")
    print()